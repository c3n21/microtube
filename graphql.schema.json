{
  "__schema": {
    "queryType": {
      "name": "Query"
    },
    "mutationType": {
      "name": "Mutation"
    },
    "subscriptionType": null,
    "types": [
      {
        "kind": "ENUM",
        "name": "AggregateFunction",
        "description": "Options for the `function` argument of `@aggregate`.",
        "isOneOf": null,
        "fields": null,
        "inputFields": null,
        "interfaces": null,
        "enumValues": [
          {
            "name": "AVG",
            "description": "Return the average value.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "MAX",
            "description": "Return the maximum.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "MIN",
            "description": "Return the minimum.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "SUM",
            "description": "Return the sum.",
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "possibleTypes": null
      },
      {
        "kind": "ENUM",
        "name": "BelongsToManyType",
        "description": "Options for the `type` argument of `@belongsToMany`.",
        "isOneOf": null,
        "fields": null,
        "inputFields": null,
        "interfaces": null,
        "enumValues": [
          {
            "name": "CONNECTION",
            "description": "Cursor-based pagination, compatible with the Relay specification.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "PAGINATOR",
            "description": "Offset-based pagination, similar to the Laravel default.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "SIMPLE",
            "description": "Offset-based pagination like the Laravel \"Simple Pagination\", which does not count the total number of records.",
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "possibleTypes": null
      },
      {
        "kind": "SCALAR",
        "name": "Boolean",
        "description": "The `Boolean` scalar type represents `true` or `false`.",
        "isOneOf": null,
        "fields": null,
        "inputFields": null,
        "interfaces": null,
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "SCALAR",
        "name": "BuilderValue",
        "description": "Any constant literal value: https://graphql.github.io/graphql-spec/draft/#sec-Input-Values",
        "isOneOf": null,
        "fields": null,
        "inputFields": null,
        "interfaces": null,
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "ENUM",
        "name": "CanAction",
        "description": null,
        "isOneOf": null,
        "fields": null,
        "inputFields": null,
        "interfaces": null,
        "enumValues": [
          {
            "name": "EXCEPTION_NOT_AUTHORIZED",
            "description": "Throw generic \"not authorized\" exception to conceal the real error.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "EXCEPTION_PASS",
            "description": "Pass exception to the client.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "RETURN_VALUE",
            "description": "Return the value specified in `value` argument to conceal the real error.",
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "possibleTypes": null
      },
      {
        "kind": "SCALAR",
        "name": "CanArgs",
        "description": "Any constant literal value: https://graphql.github.io/graphql-spec/draft/#sec-Input-Values",
        "isOneOf": null,
        "fields": null,
        "inputFields": null,
        "interfaces": null,
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "INPUT_OBJECT",
        "name": "ClearCacheIdSource",
        "description": "Options for the `idSource` argument of `@clearCache`.\n\nExactly one of the fields must be given.",
        "isOneOf": false,
        "fields": null,
        "inputFields": [
          {
            "name": "argument",
            "description": "Path of an argument the client passes to the field `@clearCache` is applied to.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "field",
            "description": "Path of a field in the result returned from the field `@clearCache` is applied to.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "interfaces": null,
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "SCALAR",
        "name": "DateTime",
        "description": "A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`.",
        "isOneOf": null,
        "fields": null,
        "inputFields": null,
        "interfaces": null,
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "SCALAR",
        "name": "EnumValue",
        "description": "Any constant literal value: https://graphql.github.io/graphql-spec/draft/#sec-Input-Values",
        "isOneOf": null,
        "fields": null,
        "inputFields": null,
        "interfaces": null,
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "SCALAR",
        "name": "EqValue",
        "description": "Any constant literal value: https://graphql.github.io/graphql-spec/draft/#sec-Input-Values",
        "isOneOf": null,
        "fields": null,
        "inputFields": null,
        "interfaces": null,
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "SCALAR",
        "name": "Float",
        "description": "The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",
        "isOneOf": null,
        "fields": null,
        "inputFields": null,
        "interfaces": null,
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "ENUM",
        "name": "GlobalIdDecode",
        "description": "Options for the `decode` argument of `@globalId`.",
        "isOneOf": null,
        "fields": null,
        "inputFields": null,
        "interfaces": null,
        "enumValues": [
          {
            "name": "ARRAY",
            "description": "Return an array of `[$type, $id]`.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "ID",
            "description": "Return just `$id`.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "TYPE",
            "description": "Return just `$type`.",
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "possibleTypes": null
      },
      {
        "kind": "ENUM",
        "name": "HasManyThroughType",
        "description": "Options for the `type` argument of `@hasManyThrough`.",
        "isOneOf": null,
        "fields": null,
        "inputFields": null,
        "interfaces": null,
        "enumValues": [
          {
            "name": "CONNECTION",
            "description": "Cursor-based pagination, compatible with the Relay specification.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "PAGINATOR",
            "description": "Offset-based pagination, similar to the Laravel default.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "SIMPLE",
            "description": "Offset-based pagination like the Laravel \"Simple Pagination\", which does not count the total number of records.",
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "possibleTypes": null
      },
      {
        "kind": "ENUM",
        "name": "HasManyType",
        "description": "Options for the `type` argument of `@hasMany`.",
        "isOneOf": null,
        "fields": null,
        "inputFields": null,
        "interfaces": null,
        "enumValues": [
          {
            "name": "CONNECTION",
            "description": "Cursor-based pagination, compatible with the Relay specification.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "PAGINATOR",
            "description": "Offset-based pagination, similar to the Laravel default.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "SIMPLE",
            "description": "Offset-based pagination like the Laravel \"Simple Pagination\", which does not count the total number of records.",
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "possibleTypes": null
      },
      {
        "kind": "SCALAR",
        "name": "ID",
        "description": "The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.",
        "isOneOf": null,
        "fields": null,
        "inputFields": null,
        "interfaces": null,
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "SCALAR",
        "name": "Int",
        "description": "The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",
        "isOneOf": null,
        "fields": null,
        "inputFields": null,
        "interfaces": null,
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "ENUM",
        "name": "MorphManyType",
        "description": "Options for the `type` argument of `@morphMany`.",
        "isOneOf": null,
        "fields": null,
        "inputFields": null,
        "interfaces": null,
        "enumValues": [
          {
            "name": "CONNECTION",
            "description": "Cursor-based pagination, compatible with the Relay specification.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "PAGINATOR",
            "description": "Offset-based pagination, similar to the Laravel default.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "SIMPLE",
            "description": "Offset-based pagination like the Laravel \"Simple Pagination\", which does not count the total number of records.",
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "possibleTypes": null
      },
      {
        "kind": "ENUM",
        "name": "MorphToManyType",
        "description": "Options for the `type` argument of `@morphToMany`.",
        "isOneOf": null,
        "fields": null,
        "inputFields": null,
        "interfaces": null,
        "enumValues": [
          {
            "name": "CONNECTION",
            "description": "Cursor-based pagination, compatible with the Relay specification.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "PAGINATOR",
            "description": "Offset-based pagination, similar to the Laravel default.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "SIMPLE",
            "description": "Offset-based pagination like the Laravel \"Simple Pagination\", which does not count the total number of records.",
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "possibleTypes": null
      },
      {
        "kind": "OBJECT",
        "name": "Mutation",
        "description": null,
        "isOneOf": null,
        "fields": [
          {
            "name": "createVideo",
            "description": null,
            "args": [
              {
                "name": "file",
                "description": null,
                "type": {
                  "kind": "NON_NULL",
                  "name": null,
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Upload",
                    "ofType": null
                  }
                },
                "defaultValue": null,
                "isDeprecated": false,
                "deprecationReason": null
              },
              {
                "name": "title",
                "description": null,
                "type": {
                  "kind": "NON_NULL",
                  "name": null,
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "String",
                    "ofType": null
                  }
                },
                "defaultValue": null,
                "isDeprecated": false,
                "deprecationReason": null
              },
              {
                "name": "user_id",
                "description": null,
                "type": {
                  "kind": "NON_NULL",
                  "name": null,
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "ID",
                    "ofType": null
                  }
                },
                "defaultValue": null,
                "isDeprecated": false,
                "deprecationReason": null
              }
            ],
            "type": {
              "kind": "OBJECT",
              "name": "Video",
              "ofType": null
            },
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "inputFields": null,
        "interfaces": [],
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "INPUT_OBJECT",
        "name": "OrderByClause",
        "description": "Allows ordering a list of records.",
        "isOneOf": false,
        "fields": null,
        "inputFields": [
          {
            "name": "column",
            "description": "The column that is used for ordering.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "order",
            "description": "The direction that is used for ordering.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "ENUM",
                "name": "SortOrder",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "interfaces": null,
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "ENUM",
        "name": "OrderByDirection",
        "description": "Options for the `direction` argument of `@orderBy`.",
        "isOneOf": null,
        "fields": null,
        "inputFields": null,
        "interfaces": null,
        "enumValues": [
          {
            "name": "ASC",
            "description": "Sort in ascending order.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "DESC",
            "description": "Sort in descending order.",
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "possibleTypes": null
      },
      {
        "kind": "INPUT_OBJECT",
        "name": "OrderByRelation",
        "description": "Options for the `relations` argument of `@orderBy`.",
        "isOneOf": false,
        "fields": null,
        "inputFields": [
          {
            "name": "columns",
            "description": "Restrict the allowed column names to a well-defined list.\nThis improves introspection capabilities and security.\nMutually exclusive with `columnsEnum`.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "columnsEnum",
            "description": "Use an existing enumeration type to restrict the allowed columns to a predefined list.\nThis allows you to re-use the same enum for multiple fields.\nMutually exclusive with `columns`.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "relation",
            "description": "Name of the relation.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "interfaces": null,
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "ENUM",
        "name": "OrderByRelationAggregateFunction",
        "description": "Aggregate functions when ordering by a relation without specifying a column.",
        "isOneOf": null,
        "fields": null,
        "inputFields": null,
        "interfaces": null,
        "enumValues": [
          {
            "name": "COUNT",
            "description": "Amount of items.",
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "possibleTypes": null
      },
      {
        "kind": "ENUM",
        "name": "OrderByRelationWithColumnAggregateFunction",
        "description": "Aggregate functions when ordering by a relation that may specify a column.",
        "isOneOf": null,
        "fields": null,
        "inputFields": null,
        "interfaces": null,
        "enumValues": [
          {
            "name": "AVG",
            "description": "Average.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "COUNT",
            "description": "Amount of items.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "MAX",
            "description": "Maximum.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "MIN",
            "description": "Minimum.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "SUM",
            "description": "Sum.",
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "possibleTypes": null
      },
      {
        "kind": "ENUM",
        "name": "PaginateType",
        "description": "Options for the `type` argument of `@paginate`.",
        "isOneOf": null,
        "fields": null,
        "inputFields": null,
        "interfaces": null,
        "enumValues": [
          {
            "name": "CONNECTION",
            "description": "Cursor-based pagination, compatible with the Relay specification.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "PAGINATOR",
            "description": "Offset-based pagination, similar to the Laravel default.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "SIMPLE",
            "description": "Offset-based pagination like the Laravel \"Simple Pagination\", which does not count the total number of records.",
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "possibleTypes": null
      },
      {
        "kind": "OBJECT",
        "name": "PaginatorInfo",
        "description": "Information about pagination using a fully featured paginator.",
        "isOneOf": null,
        "fields": [
          {
            "name": "count",
            "description": "Number of items in the current page.",
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "Int",
                "ofType": null
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "currentPage",
            "description": "Index of the current page.",
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "Int",
                "ofType": null
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "firstItem",
            "description": "Index of the first item in the current page.",
            "args": [],
            "type": {
              "kind": "SCALAR",
              "name": "Int",
              "ofType": null
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "hasMorePages",
            "description": "Are there more pages after this one?",
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "Boolean",
                "ofType": null
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "lastItem",
            "description": "Index of the last item in the current page.",
            "args": [],
            "type": {
              "kind": "SCALAR",
              "name": "Int",
              "ofType": null
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "lastPage",
            "description": "Index of the last available page.",
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "Int",
                "ofType": null
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "perPage",
            "description": "Number of items per page.",
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "Int",
                "ofType": null
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "total",
            "description": "Number of total available items.",
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "Int",
                "ofType": null
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "inputFields": null,
        "interfaces": [],
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "OBJECT",
        "name": "Query",
        "description": "Indicates what fields are available at the top level of a query operation.",
        "isOneOf": null,
        "fields": [
          {
            "name": "user",
            "description": "Find a single user by an identifying attribute.",
            "args": [
              {
                "name": "email",
                "description": "Search by email address.",
                "type": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                },
                "defaultValue": null,
                "isDeprecated": false,
                "deprecationReason": null
              },
              {
                "name": "id",
                "description": "Search by primary key.",
                "type": {
                  "kind": "SCALAR",
                  "name": "ID",
                  "ofType": null
                },
                "defaultValue": null,
                "isDeprecated": false,
                "deprecationReason": null
              }
            ],
            "type": {
              "kind": "OBJECT",
              "name": "User",
              "ofType": null
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "users",
            "description": "List multiple users.",
            "args": [
              {
                "name": "name",
                "description": "Filters by name. Accepts SQL LIKE wildcards `%` and `_`.",
                "type": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                },
                "defaultValue": null,
                "isDeprecated": false,
                "deprecationReason": null
              }
            ],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "LIST",
                "name": null,
                "ofType": {
                  "kind": "NON_NULL",
                  "name": null,
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "User",
                    "ofType": null
                  }
                }
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "videos",
            "description": "List multiple videos.",
            "args": [
              {
                "name": "title",
                "description": "Filters by title. Accepts SQL LIKE wildcards `%` and `_`.",
                "type": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                },
                "defaultValue": null,
                "isDeprecated": false,
                "deprecationReason": null
              }
            ],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "LIST",
                "name": null,
                "ofType": {
                  "kind": "NON_NULL",
                  "name": null,
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Video",
                    "ofType": null
                  }
                }
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "inputFields": null,
        "interfaces": [],
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "INPUT_OBJECT",
        "name": "RulesForArrayMessage",
        "description": "Input for the `messages` argument of `@rulesForArray`.",
        "isOneOf": false,
        "fields": null,
        "inputFields": [
          {
            "name": "message",
            "description": "Message to display if the rule fails, e.g. `\"Must be a valid email\"`.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "rule",
            "description": "Name of the rule, e.g. `\"email\"`.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "interfaces": null,
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "INPUT_OBJECT",
        "name": "RulesMessage",
        "description": "Input for the `messages` argument of `@rules`.",
        "isOneOf": false,
        "fields": null,
        "inputFields": [
          {
            "name": "message",
            "description": "Message to display if the rule fails, e.g. `\"Must be a valid email\"`.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "rule",
            "description": "Name of the rule, e.g. `\"email\"`.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "interfaces": null,
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "ENUM",
        "name": "SortOrder",
        "description": "Directions for ordering a list of records.",
        "isOneOf": null,
        "fields": null,
        "inputFields": null,
        "interfaces": null,
        "enumValues": [
          {
            "name": "ASC",
            "description": "Sort records in ascending order.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "DESC",
            "description": "Sort records in descending order.",
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "possibleTypes": null
      },
      {
        "kind": "SCALAR",
        "name": "String",
        "description": "The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",
        "isOneOf": null,
        "fields": null,
        "inputFields": null,
        "interfaces": null,
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "ENUM",
        "name": "Trashed",
        "description": "Specify if you want to include or exclude trashed results from a query.",
        "isOneOf": null,
        "fields": null,
        "inputFields": null,
        "interfaces": null,
        "enumValues": [
          {
            "name": "ONLY",
            "description": "Only return trashed results.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "WITH",
            "description": "Return both trashed and non-trashed results.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "WITHOUT",
            "description": "Only return non-trashed results.",
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "possibleTypes": null
      },
      {
        "kind": "SCALAR",
        "name": "Upload",
        "description": "Can be used as an argument to upload files using https://github.com/jaydenseric/graphql-multipart-request-spec",
        "isOneOf": null,
        "fields": null,
        "inputFields": null,
        "interfaces": null,
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "OBJECT",
        "name": "User",
        "description": "Account of a person who utilizes this application.",
        "isOneOf": null,
        "fields": [
          {
            "name": "created_at",
            "description": "When the account was created.",
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "DateTime",
                "ofType": null
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "email",
            "description": "Unique email address.",
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "email_verified_at",
            "description": "When the email was verified.",
            "args": [],
            "type": {
              "kind": "SCALAR",
              "name": "DateTime",
              "ofType": null
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "id",
            "description": "Unique primary key.",
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "ID",
                "ofType": null
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "name",
            "description": "Non-unique name.",
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "updated_at",
            "description": "When the account was last updated.",
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "DateTime",
                "ofType": null
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "videos",
            "description": "Videos uploaded by the user.",
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "LIST",
                "name": null,
                "ofType": {
                  "kind": "NON_NULL",
                  "name": null,
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Video",
                    "ofType": null
                  }
                }
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "inputFields": null,
        "interfaces": [],
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "OBJECT",
        "name": "UserPaginator",
        "description": "A paginated list of User items.",
        "isOneOf": null,
        "fields": [
          {
            "name": "data",
            "description": "A list of User items.",
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "LIST",
                "name": null,
                "ofType": {
                  "kind": "NON_NULL",
                  "name": null,
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "User",
                    "ofType": null
                  }
                }
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "paginatorInfo",
            "description": "Pagination information about the list of items.",
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "OBJECT",
                "name": "PaginatorInfo",
                "ofType": null
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "inputFields": null,
        "interfaces": [],
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "OBJECT",
        "name": "Video",
        "description": null,
        "isOneOf": null,
        "fields": [
          {
            "name": "id",
            "description": "Unique primary key.",
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "ID",
                "ofType": null
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "title",
            "description": "Title of the video.",
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "uploaded_at",
            "description": "When the video was uploaded.",
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "DateTime",
                "ofType": null
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "user",
            "description": null,
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "OBJECT",
                "name": "User",
                "ofType": null
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "inputFields": null,
        "interfaces": [],
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "OBJECT",
        "name": "VideoPaginator",
        "description": "A paginated list of Video items.",
        "isOneOf": null,
        "fields": [
          {
            "name": "data",
            "description": "A list of Video items.",
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "LIST",
                "name": null,
                "ofType": {
                  "kind": "NON_NULL",
                  "name": null,
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Video",
                    "ofType": null
                  }
                }
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "paginatorInfo",
            "description": "Pagination information about the list of items.",
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "OBJECT",
                "name": "PaginatorInfo",
                "ofType": null
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "inputFields": null,
        "interfaces": [],
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "SCALAR",
        "name": "WhereKeyValue",
        "description": "Any constant literal value: https://graphql.github.io/graphql-spec/draft/#sec-Input-Values",
        "isOneOf": null,
        "fields": null,
        "inputFields": null,
        "interfaces": null,
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "SCALAR",
        "name": "WhereValue",
        "description": "Any constant literal value: https://graphql.github.io/graphql-spec/draft/#sec-Input-Values",
        "isOneOf": null,
        "fields": null,
        "inputFields": null,
        "interfaces": null,
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "SCALAR",
        "name": "_",
        "description": "Placeholder type for various directives such as `@orderBy`.\nWill be replaced by a generated type during schema manipulation.",
        "isOneOf": null,
        "fields": null,
        "inputFields": null,
        "interfaces": null,
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "OBJECT",
        "name": "__Directive",
        "description": "A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",
        "isOneOf": null,
        "fields": [
          {
            "name": "name",
            "description": null,
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "description",
            "description": null,
            "args": [],
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "isRepeatable",
            "description": null,
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "Boolean",
                "ofType": null
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "locations",
            "description": null,
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "LIST",
                "name": null,
                "ofType": {
                  "kind": "NON_NULL",
                  "name": null,
                  "ofType": {
                    "kind": "ENUM",
                    "name": "__DirectiveLocation",
                    "ofType": null
                  }
                }
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "args",
            "description": null,
            "args": [
              {
                "name": "includeDeprecated",
                "description": null,
                "type": {
                  "kind": "SCALAR",
                  "name": "Boolean",
                  "ofType": null
                },
                "defaultValue": "false",
                "isDeprecated": false,
                "deprecationReason": null
              }
            ],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "LIST",
                "name": null,
                "ofType": {
                  "kind": "NON_NULL",
                  "name": null,
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "__InputValue",
                    "ofType": null
                  }
                }
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "inputFields": null,
        "interfaces": [],
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "ENUM",
        "name": "__DirectiveLocation",
        "description": "A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",
        "isOneOf": null,
        "fields": null,
        "inputFields": null,
        "interfaces": null,
        "enumValues": [
          {
            "name": "QUERY",
            "description": "Location adjacent to a query operation.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "MUTATION",
            "description": "Location adjacent to a mutation operation.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "SUBSCRIPTION",
            "description": "Location adjacent to a subscription operation.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "FIELD",
            "description": "Location adjacent to a field.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "FRAGMENT_DEFINITION",
            "description": "Location adjacent to a fragment definition.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "FRAGMENT_SPREAD",
            "description": "Location adjacent to a fragment spread.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "INLINE_FRAGMENT",
            "description": "Location adjacent to an inline fragment.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "VARIABLE_DEFINITION",
            "description": "Location adjacent to a variable definition.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "SCHEMA",
            "description": "Location adjacent to a schema definition.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "SCALAR",
            "description": "Location adjacent to a scalar definition.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "OBJECT",
            "description": "Location adjacent to an object type definition.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "FIELD_DEFINITION",
            "description": "Location adjacent to a field definition.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "ARGUMENT_DEFINITION",
            "description": "Location adjacent to an argument definition.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "INTERFACE",
            "description": "Location adjacent to an interface definition.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "UNION",
            "description": "Location adjacent to a union definition.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "ENUM",
            "description": "Location adjacent to an enum definition.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "ENUM_VALUE",
            "description": "Location adjacent to an enum value definition.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "INPUT_OBJECT",
            "description": "Location adjacent to an input object type definition.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "INPUT_FIELD_DEFINITION",
            "description": "Location adjacent to an input object field definition.",
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "possibleTypes": null
      },
      {
        "kind": "OBJECT",
        "name": "__EnumValue",
        "description": "One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",
        "isOneOf": null,
        "fields": [
          {
            "name": "name",
            "description": null,
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "description",
            "description": null,
            "args": [],
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "isDeprecated",
            "description": null,
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "Boolean",
                "ofType": null
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "deprecationReason",
            "description": null,
            "args": [],
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "inputFields": null,
        "interfaces": [],
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "OBJECT",
        "name": "__Field",
        "description": "Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",
        "isOneOf": null,
        "fields": [
          {
            "name": "name",
            "description": null,
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "description",
            "description": null,
            "args": [],
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "args",
            "description": null,
            "args": [
              {
                "name": "includeDeprecated",
                "description": null,
                "type": {
                  "kind": "SCALAR",
                  "name": "Boolean",
                  "ofType": null
                },
                "defaultValue": "false",
                "isDeprecated": false,
                "deprecationReason": null
              }
            ],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "LIST",
                "name": null,
                "ofType": {
                  "kind": "NON_NULL",
                  "name": null,
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "__InputValue",
                    "ofType": null
                  }
                }
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "type",
            "description": null,
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "OBJECT",
                "name": "__Type",
                "ofType": null
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "isDeprecated",
            "description": null,
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "Boolean",
                "ofType": null
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "deprecationReason",
            "description": null,
            "args": [],
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "inputFields": null,
        "interfaces": [],
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "OBJECT",
        "name": "__InputValue",
        "description": "Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",
        "isOneOf": null,
        "fields": [
          {
            "name": "name",
            "description": null,
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "description",
            "description": null,
            "args": [],
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "type",
            "description": null,
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "OBJECT",
                "name": "__Type",
                "ofType": null
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "defaultValue",
            "description": "A GraphQL-formatted string representing the default value for this input value.",
            "args": [],
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "isDeprecated",
            "description": null,
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "Boolean",
                "ofType": null
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "deprecationReason",
            "description": null,
            "args": [],
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "inputFields": null,
        "interfaces": [],
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "OBJECT",
        "name": "__Schema",
        "description": "A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",
        "isOneOf": null,
        "fields": [
          {
            "name": "description",
            "description": null,
            "args": [],
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "types",
            "description": "A list of all types supported by this server.",
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "LIST",
                "name": null,
                "ofType": {
                  "kind": "NON_NULL",
                  "name": null,
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "__Type",
                    "ofType": null
                  }
                }
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "queryType",
            "description": "The type that query operations will be rooted at.",
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "OBJECT",
                "name": "__Type",
                "ofType": null
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "mutationType",
            "description": "If this server supports mutation, the type that mutation operations will be rooted at.",
            "args": [],
            "type": {
              "kind": "OBJECT",
              "name": "__Type",
              "ofType": null
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "subscriptionType",
            "description": "If this server support subscription, the type that subscription operations will be rooted at.",
            "args": [],
            "type": {
              "kind": "OBJECT",
              "name": "__Type",
              "ofType": null
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "directives",
            "description": "A list of all directives supported by this server.",
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "LIST",
                "name": null,
                "ofType": {
                  "kind": "NON_NULL",
                  "name": null,
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "__Directive",
                    "ofType": null
                  }
                }
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "inputFields": null,
        "interfaces": [],
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "OBJECT",
        "name": "__Type",
        "description": "The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",
        "isOneOf": null,
        "fields": [
          {
            "name": "kind",
            "description": null,
            "args": [],
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "ENUM",
                "name": "__TypeKind",
                "ofType": null
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "name",
            "description": null,
            "args": [],
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "description",
            "description": null,
            "args": [],
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "specifiedByURL",
            "description": null,
            "args": [],
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "fields",
            "description": null,
            "args": [
              {
                "name": "includeDeprecated",
                "description": null,
                "type": {
                  "kind": "SCALAR",
                  "name": "Boolean",
                  "ofType": null
                },
                "defaultValue": "false",
                "isDeprecated": false,
                "deprecationReason": null
              }
            ],
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "OBJECT",
                  "name": "__Field",
                  "ofType": null
                }
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "interfaces",
            "description": null,
            "args": [],
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "OBJECT",
                  "name": "__Type",
                  "ofType": null
                }
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "possibleTypes",
            "description": null,
            "args": [],
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "OBJECT",
                  "name": "__Type",
                  "ofType": null
                }
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "enumValues",
            "description": null,
            "args": [
              {
                "name": "includeDeprecated",
                "description": null,
                "type": {
                  "kind": "SCALAR",
                  "name": "Boolean",
                  "ofType": null
                },
                "defaultValue": "false",
                "isDeprecated": false,
                "deprecationReason": null
              }
            ],
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "OBJECT",
                  "name": "__EnumValue",
                  "ofType": null
                }
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "inputFields",
            "description": null,
            "args": [
              {
                "name": "includeDeprecated",
                "description": null,
                "type": {
                  "kind": "SCALAR",
                  "name": "Boolean",
                  "ofType": null
                },
                "defaultValue": "false",
                "isDeprecated": false,
                "deprecationReason": null
              }
            ],
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "OBJECT",
                  "name": "__InputValue",
                  "ofType": null
                }
              }
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "ofType",
            "description": null,
            "args": [],
            "type": {
              "kind": "OBJECT",
              "name": "__Type",
              "ofType": null
            },
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "isOneOf",
            "description": null,
            "args": [],
            "type": {
              "kind": "SCALAR",
              "name": "Boolean",
              "ofType": null
            },
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "inputFields": null,
        "interfaces": [],
        "enumValues": null,
        "possibleTypes": null
      },
      {
        "kind": "ENUM",
        "name": "__TypeKind",
        "description": "An enum describing what kind of type a given `__Type` is.",
        "isOneOf": null,
        "fields": null,
        "inputFields": null,
        "interfaces": null,
        "enumValues": [
          {
            "name": "SCALAR",
            "description": "Indicates this type is a scalar.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "OBJECT",
            "description": "Indicates this type is an object. `fields` and `interfaces` are valid fields.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "INTERFACE",
            "description": "Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "UNION",
            "description": "Indicates this type is a union. `possibleTypes` is a valid field.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "ENUM",
            "description": "Indicates this type is an enum. `enumValues` is a valid field.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "INPUT_OBJECT",
            "description": "Indicates this type is an input object. `inputFields` is a valid field.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "LIST",
            "description": "Indicates this type is a list. `ofType` is a valid field.",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "NON_NULL",
            "description": "Indicates this type is a non-null. `ofType` is a valid field.",
            "isDeprecated": false,
            "deprecationReason": null
          }
        ],
        "possibleTypes": null
      }
    ],
    "directives": [
      {
        "name": "aggregate",
        "description": "Returns an aggregate of a column in a given relationship or model.",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "builder",
            "description": "Point to a function that provides a Query Builder instance.\nConsists of two parts: a class name and a method name, seperated by an `@` symbol.\nIf you pass only a class name, the method name defaults to `__invoke`.\nMutually exclusive with `relation` and `model`.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "column",
            "description": "The column to aggregate.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "function",
            "description": "The aggregate function to compute.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "ENUM",
                "name": "AggregateFunction",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "model",
            "description": "The model with the column to aggregate.\nMutually exclusive with `relation` and `builder`.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "relation",
            "description": "The relationship with the column to aggregate.\nMutually exclusive with `model` and `builder`.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "scopes",
            "description": "Apply scopes to the underlying query.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "all",
        "description": "Fetch all Eloquent models and return the collection as the result.",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "builder",
            "description": "Point to a function that provides a Query Builder instance.\nConsists of two parts: a class name and a method name, seperated by an `@` symbol.\nIf you pass only a class name, the method name defaults to `__invoke`.\nMutually exclusive with `model`.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "model",
            "description": "Specify the class name of the model to use.\nThis is only needed when the default model detection does not work.\nMutually exclusive with `builder`.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "scopes",
            "description": "Apply scopes to the underlying query.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "async",
        "description": "Defer the execution of mutations to [queued jobs](https://laravel.com/docs/queues).\n\nThis directive must only be used on fields of the root mutation type.\nWhen the field is executed, a `Nuwave\\Lighthouse\\Async\\AsyncMutation` job is dispatched\nand the value `true` is returned - thus the fields return type must be `Boolean!`.\n\nOnce a [queue worker](https://laravel.com/docs/queues#running-the-queue-worker) picks up the job,\nit will actually execute the underlying field resolver.\nErrors that occur during execution are reported through the Laravel exception handler.\nThe handlers in the `config/lighthouse.php` option `error_handlers` are not called.",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "queue",
            "description": "Name of the queue to dispatch the job on.\nIf not specified, jobs will be dispatched to the default queue.\nSee https://laravel.com/docs/queues#customizing-the-queue-and-connection.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "auth",
        "description": "Return the currently authenticated user as the result of a query.",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "guards",
            "description": "Specify which guards to use, e.g. [\"api\"].\nWhen not defined, the default from `lighthouse.php` is used.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "belongsTo",
        "description": "Resolves a field through the Eloquent `BelongsTo` relationship.",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "relation",
            "description": "Specify the relationship method name in the model class,\nif it is named different from the field in the schema.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "scopes",
            "description": "Apply scopes to the underlying query.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "belongsToMany",
        "description": "Resolves a field through the Eloquent `BelongsToMany` relationship.",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "defaultCount",
            "description": "Allow clients to query paginated lists without specifying the amount of items.\nOverrules the `pagination.default_count` setting from `lighthouse.php`.\nSetting this to `null` means clients have to explicitly ask for the count.",
            "type": {
              "kind": "SCALAR",
              "name": "Int",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "edgeType",
            "description": "Specify a custom type that implements the Edge interface\nto extend edge object.\nOnly applies when using Relay style \"connection\" pagination.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "maxCount",
            "description": "Limit the maximum amount of items that clients can request from paginated lists.\nOverrules the `pagination.max_count` setting from `lighthouse.php`.\nSetting this to `null` means the count is unrestricted.",
            "type": {
              "kind": "SCALAR",
              "name": "Int",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "relation",
            "description": "Specify the relationship method name in the model class,\nif it is named different from the field in the schema.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "scopes",
            "description": "Apply scopes to the underlying query.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "type",
            "description": "Allows to resolve the relation as a paginated list.",
            "type": {
              "kind": "ENUM",
              "name": "BelongsToManyType",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "builder",
        "description": "Manipulate the query builder with a method.",
        "isRepeatable": true,
        "locations": [
          "ARGUMENT_DEFINITION",
          "FIELD_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "method",
            "description": "Reference a method that is passed the query builder.\nConsists of two parts: a class name and a method name, separated by an `@` symbol.\nIf you pass only a class name, the method name defaults to `__invoke`.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "value",
            "description": "Pass a value to the method as the second argument after the query builder.\nOnly used when the directive is added on a field.",
            "type": {
              "kind": "SCALAR",
              "name": "BuilderValue",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "cache",
        "description": "Cache the result of a resolver.\n\nPlace this after other field middleware to ensure it caches the correct transformed value.",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "maxAge",
            "description": "Set the duration it takes for the cache to expire in seconds.\nIf not given, the result will be stored forever.",
            "type": {
              "kind": "SCALAR",
              "name": "Int",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "private",
            "description": "Limit access to cached data to the currently authenticated user.\nWhen the field is accessible by guest users, this will not have\nany effect, they will access a shared cache.",
            "type": {
              "kind": "SCALAR",
              "name": "Boolean",
              "ofType": null
            },
            "defaultValue": "false",
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "cacheKey",
        "description": "Specify the field to use as a key when creating a cache.",
        "isRepeatable": false,
        "locations": [
          "ARGUMENT_DEFINITION",
          "FIELD_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": []
      },
      {
        "name": "can",
        "description": "Check a Laravel Policy to ensure the current user is authorized to access a field.\n\nWhen `injectArgs` and `args` are used together, the client given\narguments will be passed before the static args.",
        "isRepeatable": true,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "ability",
            "description": "The ability to check permissions for.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "args",
            "description": "Statically defined arguments that are passed to `Gate::check`.\n\nYou may pass arbitrary GraphQL literals,\ne.g.: [1, 2, 3] or { foo: \"bar\" }\n\nCanArgs pseudo-scalar is defined in BaseCanDirective.",
            "type": {
              "kind": "SCALAR",
              "name": "CanArgs",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "find",
            "description": "If your policy checks against specific model instances, specify\nthe name of the field argument that contains its primary key(s).\n\nYou may pass the string in dot notation to use nested inputs.\n\nMutually exclusive with `resolved`, `query`, and `root`.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "findOrFail",
            "description": "Should the query fail when the models of `find` were not found?",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "Boolean",
                "ofType": null
              }
            },
            "defaultValue": "true",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "injectArgs",
            "description": "Pass along the client given input data as arguments to `Gate::check`.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "Boolean",
                "ofType": null
              }
            },
            "defaultValue": "false",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "model",
            "description": "Specify the class name of the model to use.\nThis is only needed when the default model detection does not work.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "query",
            "description": "Query for specific model instances to check the policy against, using arguments\nwith directives that add constraints to the query builder, such as `@eq`.\n\nMutually exclusive with `resolved`, `find`, and `root`.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "Boolean",
                "ofType": null
              }
            },
            "defaultValue": "false",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "resolved",
            "description": "Check the policy against the model instances returned by the field resolver.\nOnly use this if the field does not mutate data, it is run before checking.\n\nMutually exclusive with `query`, `find`, and `root`.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "Boolean",
                "ofType": null
              }
            },
            "defaultValue": "false",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "root",
            "description": "If your policy should check against the root value.\n\nMutually exclusive with `resolved`, `query`, and `find`.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "Boolean",
                "ofType": null
              }
            },
            "defaultValue": "false",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "scopes",
            "description": "Apply scopes to the underlying query.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "canFind",
        "description": "Check a Laravel Policy to ensure the current user is authorized to access a field.\n\nQuery for specific model instances to check the policy against, using primary key(s) from specified argument.",
        "isRepeatable": true,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "ability",
            "description": "The ability to check permissions for.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "action",
            "description": "Action to do if the user is not authorized.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "ENUM",
                "name": "CanAction",
                "ofType": null
              }
            },
            "defaultValue": "EXCEPTION_PASS",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "args",
            "description": "Statically defined arguments that are passed to `Gate::check`.\n\nYou may pass arbitrary GraphQL literals,\ne.g.: [1, 2, 3] or { foo: \"bar\" }",
            "type": {
              "kind": "SCALAR",
              "name": "CanArgs",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "find",
            "description": "Specify the name of the field argument that contains its primary key(s).\n\nYou may pass the string in dot notation to use nested inputs.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "findOrFail",
            "description": "Should the query fail when the models of `find` were not found?",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "Boolean",
                "ofType": null
              }
            },
            "defaultValue": "true",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "injectArgs",
            "description": "Pass along the client given input data as arguments to `Gate::check`.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "Boolean",
                "ofType": null
              }
            },
            "defaultValue": "false",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "model",
            "description": "Specify the class name of the model to use.\nThis is only needed when the default model detection does not work.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "returnValue",
            "description": "Value to return if the user is not authorized and `action` is `RETURN_VALUE`.",
            "type": {
              "kind": "SCALAR",
              "name": "CanArgs",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "scopes",
            "description": "Apply scopes to the underlying query.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "canModel",
        "description": "Check a Laravel Policy to ensure the current user is authorized to access a field.\n\nCheck the policy against the root model.",
        "isRepeatable": true,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "ability",
            "description": "The ability to check permissions for.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "action",
            "description": "Action to do if the user is not authorized.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "ENUM",
                "name": "CanAction",
                "ofType": null
              }
            },
            "defaultValue": "EXCEPTION_PASS",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "args",
            "description": "Statically defined arguments that are passed to `Gate::check`.\n\nYou may pass arbitrary GraphQL literals,\ne.g.: [1, 2, 3] or { foo: \"bar\" }",
            "type": {
              "kind": "SCALAR",
              "name": "CanArgs",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "injectArgs",
            "description": "Pass along the client given input data as arguments to `Gate::check`.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "Boolean",
                "ofType": null
              }
            },
            "defaultValue": "false",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "model",
            "description": "The model name to check against.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "returnValue",
            "description": "Value to return if the user is not authorized and `action` is `RETURN_VALUE`.",
            "type": {
              "kind": "SCALAR",
              "name": "CanArgs",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "canQuery",
        "description": "Check a Laravel Policy to ensure the current user is authorized to access a field.\n\nQuery for specific model instances to check the policy against, using arguments\nwith directives that add constraints to the query builder, such as `@eq`.",
        "isRepeatable": true,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "ability",
            "description": "The ability to check permissions for.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "action",
            "description": "Action to do if the user is not authorized.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "ENUM",
                "name": "CanAction",
                "ofType": null
              }
            },
            "defaultValue": "EXCEPTION_PASS",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "args",
            "description": "Statically defined arguments that are passed to `Gate::check`.\n\nYou may pass arbitrary GraphQL literals,\ne.g.: [1, 2, 3] or { foo: \"bar\" }",
            "type": {
              "kind": "SCALAR",
              "name": "CanArgs",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "injectArgs",
            "description": "Pass along the client given input data as arguments to `Gate::check`.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "Boolean",
                "ofType": null
              }
            },
            "defaultValue": "false",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "returnValue",
            "description": "Value to return if the user is not authorized and `action` is `RETURN_VALUE`.",
            "type": {
              "kind": "SCALAR",
              "name": "CanArgs",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "scopes",
            "description": "Apply scopes to the underlying query.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "canResolved",
        "description": "Check a Laravel Policy to ensure the current user is authorized to access a field.\n\nCheck the policy against the model instances returned by the field resolver.\nOnly use this if the field does not mutate data, it is run before checking.",
        "isRepeatable": true,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "ability",
            "description": "The ability to check permissions for.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "action",
            "description": "Action to do if the user is not authorized.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "ENUM",
                "name": "CanAction",
                "ofType": null
              }
            },
            "defaultValue": "EXCEPTION_PASS",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "args",
            "description": "Statically defined arguments that are passed to `Gate::check`.\n\nYou may pass arbitrary GraphQL literals,\ne.g.: [1, 2, 3] or { foo: \"bar\" }",
            "type": {
              "kind": "SCALAR",
              "name": "CanArgs",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "injectArgs",
            "description": "Pass along the client given input data as arguments to `Gate::check`.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "Boolean",
                "ofType": null
              }
            },
            "defaultValue": "false",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "returnValue",
            "description": "Value to return if the user is not authorized and `action` is `RETURN_VALUE`.",
            "type": {
              "kind": "SCALAR",
              "name": "CanArgs",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "canRoot",
        "description": "Check a Laravel Policy to ensure the current user is authorized to access a field.\n\nCheck the policy against the root object.",
        "isRepeatable": true,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "ability",
            "description": "The ability to check permissions for.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "action",
            "description": "Action to do if the user is not authorized.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "ENUM",
                "name": "CanAction",
                "ofType": null
              }
            },
            "defaultValue": "EXCEPTION_PASS",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "args",
            "description": "Statically defined arguments that are passed to `Gate::check`.\n\nYou may pass arbitrary GraphQL literals,\ne.g.: [1, 2, 3] or { foo: \"bar\" }",
            "type": {
              "kind": "SCALAR",
              "name": "CanArgs",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "injectArgs",
            "description": "Pass along the client given input data as arguments to `Gate::check`.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "Boolean",
                "ofType": null
              }
            },
            "defaultValue": "false",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "returnValue",
            "description": "Value to return if the user is not authorized and `action` is `RETURN_VALUE`.",
            "type": {
              "kind": "SCALAR",
              "name": "CanArgs",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "clearCache",
        "description": "Clear a resolver cache by tags.",
        "isRepeatable": true,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "field",
            "description": "Name of the field to clear.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "idSource",
            "description": "Source of the parent ID to clear.",
            "type": {
              "kind": "INPUT_OBJECT",
              "name": "ClearCacheIdSource",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "type",
            "description": "Name of the parent type of the field to clear.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "complexity",
        "description": "Customize the calculation of a fields complexity score before execution.",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "resolver",
            "description": "Reference a function to customize the complexity score calculation.\nConsists of two parts: a class name and a method name, seperated by an `@` symbol.\nIf you pass only a class name, the method name defaults to `__invoke`.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "convertEmptyStringsToNull",
        "description": "Replaces incoming empty strings `\"\"` with `null`.\n\nWhen used upon fields, empty strings for non-nullable inputs will pass unchanged.\nOnly explicitly placing this on non-nullable inputs will force the conversion.",
        "isRepeatable": false,
        "locations": [
          "ARGUMENT_DEFINITION",
          "FIELD_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": []
      },
      {
        "name": "count",
        "description": "Returns the count of a given relationship or model.",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "columns",
            "description": "Count only rows where the given columns are non-null.\n`*` counts every row.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "LIST",
                "name": null,
                "ofType": {
                  "kind": "NON_NULL",
                  "name": null,
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "String",
                    "ofType": null
                  }
                }
              }
            },
            "defaultValue": "[\"*\"]",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "distinct",
            "description": "Should exclude duplicated rows?",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "Boolean",
                "ofType": null
              }
            },
            "defaultValue": "false",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "model",
            "description": "The model to count.\nMutually exclusive with `relation`.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "relation",
            "description": "The relationship to count.\nMutually exclusive with `model`.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "scopes",
            "description": "Apply scopes to the underlying query.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "create",
        "description": "Create a new Eloquent model with the given arguments.",
        "isRepeatable": false,
        "locations": [
          "ARGUMENT_DEFINITION",
          "FIELD_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "model",
            "description": "Specify the class name of the model to use.\nThis is only needed when the default model detection does not work.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "relation",
            "description": "Specify the name of the relation on the parent model.\nThis is only needed when using this directive as a nested arg\nresolver and if the name of the relation is not the arg name.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "createMany",
        "description": "Create multiple new Eloquent models with the given arguments.",
        "isRepeatable": false,
        "locations": [
          "ARGUMENT_DEFINITION",
          "FIELD_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "model",
            "description": "Specify the class name of the model to use.\nThis is only needed when the default model detection does not work.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "relation",
            "description": "Specify the name of the relation on the parent model.\nThis is only needed when using this directive as a nested arg\nresolver and if the name of the relation is not the arg name.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "delete",
        "description": "Delete one or more models.",
        "isRepeatable": false,
        "locations": [
          "ARGUMENT_DEFINITION",
          "FIELD_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "model",
            "description": "Specify the class name of the model to use.\nThis is only needed when the default model detection does not work.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "relation",
            "description": "Specify the name of the relation on the parent model.\nThis is only needed when using this directive as a nested arg\nresolver and if the name of the relation is not the arg name.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "scopes",
            "description": "Apply scopes to the underlying query.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "deprecated",
        "description": "Marks an element of a GraphQL schema as no longer supported.",
        "isRepeatable": false,
        "locations": [
          "ARGUMENT_DEFINITION",
          "ENUM_VALUE",
          "FIELD_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "reason",
            "description": "Explains why this element was deprecated.\nIt is also beneficial to suggest what to use instead.\nFormatted in Markdown, as specified by [CommonMark](https://commonmark.org).",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": "\"No longer supported\"",
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "drop",
        "description": "Ignore the user given value, don't pass it to the resolver.",
        "isRepeatable": false,
        "locations": [
          "ARGUMENT_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": []
      },
      {
        "name": "dropArgs",
        "description": "Apply the @drop directives on the incoming arguments.",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": []
      },
      {
        "name": "enum",
        "description": "Assign an internal value to an enum key.\nWhen dealing with the Enum type in your code,\nyou will receive the defined value instead of the string key.",
        "isRepeatable": false,
        "locations": [
          "ENUM_VALUE"
        ],
        "args": [
          {
            "name": "value",
            "description": "The internal value of the enum key.",
            "type": {
              "kind": "SCALAR",
              "name": "EnumValue",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "eq",
        "description": "Add an equal conditional to a database query.",
        "isRepeatable": true,
        "locations": [
          "ARGUMENT_DEFINITION",
          "FIELD_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "key",
            "description": "Specify the database column to compare.\nRequired if the directive is:\n- used on an argument and the database column has a different name\n- used on a field",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "value",
            "description": "Provide a value to compare against.\nExclusively required when this directive is used on a field.",
            "type": {
              "kind": "SCALAR",
              "name": "EqValue",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "event",
        "description": "Dispatch an event after the resolution of a field.\n\nThe event constructor will be called with a single argument:\nthe resolved value of the field.",
        "isRepeatable": true,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "dispatch",
            "description": "Specify the fully qualified class name (FQCN) of the event to dispatch.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "field",
        "description": "Assign a resolver function to a field.",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "resolver",
            "description": "A reference to the resolver function to be used.\nConsists of two parts: a class name and a method name, seperated by an `@` symbol.\nIf you pass only a class name, the method name defaults to `__invoke`.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "find",
        "description": "Find a model based on the arguments provided.",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "model",
            "description": "Specify the class name of the model to use.\nThis is only needed when the default model detection does not work.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "scopes",
            "description": "Apply scopes to the underlying query.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "first",
        "description": "Get the first query result from a collection of Eloquent models.",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "model",
            "description": "Specify the class name of the model to use.\nThis is only needed when the default model detection does not work.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "scopes",
            "description": "Apply scopes to the underlying query.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "forceDelete",
        "description": "Permanently remove one or more soft deleted models.",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "model",
            "description": "Specify the class name of the model to use.\nThis is only needed when the default model detection does not work.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "scopes",
            "description": "Apply scopes to the underlying query.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "globalId",
        "description": "Converts between IDs/types and global IDs.\n\nWhen used upon a field, it encodes;\nwhen used upon an argument, it decodes.",
        "isRepeatable": false,
        "locations": [
          "ARGUMENT_DEFINITION",
          "FIELD_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "decode",
            "description": "Decoding a global id produces a tuple of `$type` and `$id`.\nThis setting controls which of those is passed along.",
            "type": {
              "kind": "ENUM",
              "name": "GlobalIdDecode",
              "ofType": null
            },
            "defaultValue": "ARRAY",
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "guard",
        "description": "Run authentication through one or more guards from `config/auth.php`.\n\nThis is run per field and may allow unauthenticated\nusers to still receive partial results.\n\nUsed upon an object, it applies to all fields within.",
        "isRepeatable": true,
        "locations": [
          "FIELD_DEFINITION",
          "OBJECT"
        ],
        "args": [
          {
            "name": "with",
            "description": "Specify which guards to use, e.g. [\"web\"].\nWhen not defined, the default from `lighthouse.php` is used.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "hasMany",
        "description": "Corresponds to [the Eloquent relationship HasMany](https://laravel.com/docs/eloquent-relationships#one-to-many).",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "defaultCount",
            "description": "Allow clients to query paginated lists without specifying the amount of items.\nOverrules the `pagination.default_count` setting from `lighthouse.php`.\nSetting this to `null` means clients have to explicitly ask for the count.",
            "type": {
              "kind": "SCALAR",
              "name": "Int",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "edgeType",
            "description": "Specify a custom type that implements the Edge interface\nto extend edge object.\nOnly applies when using Relay style \"connection\" pagination.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "maxCount",
            "description": "Limit the maximum amount of items that clients can request from paginated lists.\nOverrules the `pagination.max_count` setting from `lighthouse.php`.\nSetting this to `null` means the count is unrestricted.",
            "type": {
              "kind": "SCALAR",
              "name": "Int",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "relation",
            "description": "Specify the relationship method name in the model class,\nif it is named different from the field in the schema.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "scopes",
            "description": "Apply scopes to the underlying query.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "type",
            "description": "Allows to resolve the relation as a paginated list.",
            "type": {
              "kind": "ENUM",
              "name": "HasManyType",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "hasManyThrough",
        "description": "Corresponds to [the Eloquent relationship HasManyThrough](https://laravel.com/docs/eloquent-relationships#has-many-through).",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "defaultCount",
            "description": "Allow clients to query paginated lists without specifying the amount of items.\nOverrules the `pagination.default_count` setting from `lighthouse.php`.",
            "type": {
              "kind": "SCALAR",
              "name": "Int",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "edgeType",
            "description": "Specify a custom type that implements the Edge interface\nto extend edge object.\nOnly applies when using Relay style \"connection\" pagination.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "maxCount",
            "description": "Limit the maximum amount of items that clients can request from paginated lists.\nOverrules the `pagination.max_count` setting from `lighthouse.php`.",
            "type": {
              "kind": "SCALAR",
              "name": "Int",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "relation",
            "description": "Specify the relationship method name in the model class,\nif it is named different from the field in the schema.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "scopes",
            "description": "Apply scopes to the underlying query.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "type",
            "description": "Allows to resolve the relation as a paginated list.",
            "type": {
              "kind": "ENUM",
              "name": "HasManyThroughType",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "hasOne",
        "description": "Corresponds to [the Eloquent relationship HasOne](https://laravel.com/docs/eloquent-relationships#one-to-one).",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "relation",
            "description": "Specify the relationship method name in the model class,\nif it is named different from the field in the schema.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "scopes",
            "description": "Apply scopes to the underlying query.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "hasOneThrough",
        "description": "Corresponds to [the Eloquent relationship HasOneThrough](https://laravel.com/docs/eloquent-relationships#has-one-through).",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "relation",
            "description": "Specify the relationship method name in the model class,\nif it is named different from the field in the schema.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "scopes",
            "description": "Apply scopes to the underlying query.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "hash",
        "description": "Use Laravel hashing to transform an argument value.\n\nUseful for hashing passwords before inserting them into the database.\nThis uses the default hashing driver defined in `config/hashing.php`.",
        "isRepeatable": false,
        "locations": [
          "ARGUMENT_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": []
      },
      {
        "name": "hide",
        "description": "Excludes the annotated element from the schema conditionally.",
        "isRepeatable": true,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "env",
            "description": "Specify which environments must not use this field, e.g. [\"production\"].",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "LIST",
                "name": null,
                "ofType": {
                  "kind": "NON_NULL",
                  "name": null,
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "String",
                    "ofType": null
                  }
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "in",
        "description": "Use the client given list value to add an IN conditional to a database query.",
        "isRepeatable": true,
        "locations": [
          "ARGUMENT_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "key",
            "description": "Specify the database column to compare.\nOnly required if database column has a different name than the attribute in your schema.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "include",
        "description": "Directs the executor to include this field or fragment only when the `if` argument is true.",
        "isRepeatable": false,
        "locations": [
          "FIELD",
          "FRAGMENT_SPREAD",
          "INLINE_FRAGMENT"
        ],
        "args": [
          {
            "name": "if",
            "description": "Included when true.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "Boolean",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "inject",
        "description": "Inject a value from the context object into the arguments.",
        "isRepeatable": true,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "context",
            "description": "A path to the property of the context that will be injected.\nIf the value is nested within the context, you may use dot notation\nto get it, e.g. \"user.id\".",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "name",
            "description": "The target name of the argument into which the value is injected.\nYou can use dot notation to set the value at arbitrary depth\nwithin the incoming argument.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "interface",
        "description": "Use a custom resolver to determine the concrete type of an interface.",
        "isRepeatable": false,
        "locations": [
          "INTERFACE"
        ],
        "args": [
          {
            "name": "resolveType",
            "description": "Reference to a custom type-resolver function.\nConsists of two parts: a class name and a method name, seperated by an `@` symbol.\nIf you pass only a class name, the method name defaults to `__invoke`.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "lazyLoad",
        "description": "Perform a [lazy eager load](https://laravel.com/docs/eloquent-relationships#lazy-eager-loading)\non the relations of a list of models.",
        "isRepeatable": true,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "relations",
            "description": "The names of the relationship methods to load.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "LIST",
                "name": null,
                "ofType": {
                  "kind": "NON_NULL",
                  "name": null,
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "String",
                    "ofType": null
                  }
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "like",
        "description": "Add a `LIKE` conditional to a database query.",
        "isRepeatable": true,
        "locations": [
          "ARGUMENT_DEFINITION",
          "FIELD_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "key",
            "description": "Specify the database column to compare.\nRequired if the directive is:\n- used on an argument and the database column has a different name\n- used on a field",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "template",
            "description": "Fixate the positions of wildcards (`%`, `_`) in the LIKE comparison around the\nplaceholder `{}`, e.g. `%{}`, `__{}` or `%{}%`.\nIf specified, wildcard characters in the client-given input are escaped.\nIf not specified, the client can pass wildcards unescaped.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "value",
            "description": "Provide a value to compare against.\nOnly used when the directive is added on a field.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "limit",
        "description": "Allow clients to specify the maximum number of results to return when used on an argument,\nor statically limit them when used on a field.\n\nBy default, this directive does not influence the number of results the resolver queries internally,\nbut limits how much of it is returned to clients. Use the `builder` argument to change this.",
        "isRepeatable": false,
        "locations": [
          "ARGUMENT_DEFINITION",
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "builder",
            "description": "You may set this to `true` if the field uses a query builder,\nthen this directive will apply a LIMIT clause to it.\nTypically, this option should only be used for root fields,\nas it may cause wrong results with batched relation queries.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "Boolean",
                "ofType": null
              }
            },
            "defaultValue": "false",
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "method",
        "description": "Resolve a field by calling a method on the parent object.\n\nUse this if the data is not accessible through simple property access or if you\nwant to pass argument to the method.",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "name",
            "description": "Specify the method of which to fetch the data from.\nDefaults to the name of the field if not given.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "mock",
        "description": "Allows you to easily hook up a resolver for an endpoint.",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "key",
            "description": "Specify a unique key for the mock resolver.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": "\"default\"",
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "model",
        "description": "Map a model class to an object type.\n\nThis can be used when the name of the model differs from the name of the type.",
        "isRepeatable": false,
        "locations": [
          "OBJECT"
        ],
        "args": [
          {
            "name": "class",
            "description": "The class name of the corresponding model.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "morphMany",
        "description": "Corresponds to [Eloquent's MorphMany-Relationship](https://laravel.com/docs/eloquent-relationships#one-to-many-polymorphic-relations).",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "defaultCount",
            "description": "Allow clients to query paginated lists without specifying the amount of items.\nOverrules the `pagination.default_count` setting from `lighthouse.php`.\nSetting this to `null` means clients have to explicitly ask for the count.",
            "type": {
              "kind": "SCALAR",
              "name": "Int",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "edgeType",
            "description": "Specify a custom type that implements the Edge interface\nto extend edge object.\nOnly applies when using Relay style \"connection\" pagination.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "maxCount",
            "description": "Limit the maximum amount of items that clients can request from paginated lists.\nOverrules the `pagination.max_count` setting from `lighthouse.php`.\nSetting this to `null` means the count is unrestricted.",
            "type": {
              "kind": "SCALAR",
              "name": "Int",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "relation",
            "description": "Specify the relationship method name in the model class,\nif it is named different from the field in the schema.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "scopes",
            "description": "Apply scopes to the underlying query.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "type",
            "description": "Allows to resolve the relation as a paginated list.",
            "type": {
              "kind": "ENUM",
              "name": "MorphManyType",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "morphOne",
        "description": "Corresponds to [Eloquent's MorphOne-Relationship](https://laravel.com/docs/eloquent-relationships#one-to-one-polymorphic-relations).",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "relation",
            "description": "Specify the relationship method name in the model class,\nif it is named different from the field in the schema.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "scopes",
            "description": "Apply scopes to the underlying query.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "morphTo",
        "description": "Corresponds to [Eloquent's MorphTo-Relationship](https://laravel.com/docs/eloquent-relationships#one-to-one-polymorphic-relations).",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "relation",
            "description": "Specify the relationship method name in the model class,\nif it is named different from the field in the schema.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "scopes",
            "description": "Apply scopes to the underlying query.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "morphToMany",
        "description": "Corresponds to [Eloquent's ManyToMany-Polymorphic-Relationship](https://laravel.com/docs/eloquent-relationships#many-to-many-polymorphic-relations).",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "defaultCount",
            "description": "Allow clients to query paginated lists without specifying the amount of items.\nOverrules the `pagination.default_count` setting from `lighthouse.php`.\nSetting this to `null` means clients have to explicitly ask for the count.",
            "type": {
              "kind": "SCALAR",
              "name": "Int",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "edgeType",
            "description": "Specify a custom type that implements the Edge interface\nto extend edge object.\nOnly applies when using Relay style \"connection\" pagination.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "maxCount",
            "description": "Limit the maximum amount of items that clients can request from paginated lists.\nOverrules the `pagination.max_count` setting from `lighthouse.php`.\nSetting this to `null` means the count is unrestricted.",
            "type": {
              "kind": "SCALAR",
              "name": "Int",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "relation",
            "description": "Specify the relationship method name in the model class,\nif it is named different from the field in the schema.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "scopes",
            "description": "Apply scopes to the underlying query.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "type",
            "description": "Allows to resolve the relation as a paginated list.",
            "type": {
              "kind": "ENUM",
              "name": "MorphToManyType",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "namespace",
        "description": "Redefine the default namespaces used in other directives.\nThe arguments are a map from directive names to namespaces.",
        "isRepeatable": true,
        "locations": [
          "FIELD_DEFINITION",
          "OBJECT"
        ],
        "args": []
      },
      {
        "name": "namespaced",
        "description": "Provides a no-op field resolver that allows nesting of queries and mutations.\nUseful to implement [namespacing by separation of concerns](https://www.apollographql.com/docs/technotes/TN0012-namespacing-by-separation-of-concern).",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": []
      },
      {
        "name": "neq",
        "description": "Use the client given value to add a not-equal conditional to a database query.",
        "isRepeatable": true,
        "locations": [
          "ARGUMENT_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "key",
            "description": "Specify the database column to compare.\nOnly required if database column has a different name than the attribute in your schema.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "nest",
        "description": "A no-op nested arg resolver that delegates all calls\nto the ArgResolver directives attached to the children.",
        "isRepeatable": false,
        "locations": [
          "ARGUMENT_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": []
      },
      {
        "name": "node",
        "description": "Register a type for Relay's global object identification.\n\nWhen used without any arguments, Lighthouse will attempt\nto resolve the type through a model with the same name.",
        "isRepeatable": false,
        "locations": [
          "OBJECT"
        ],
        "args": [
          {
            "name": "model",
            "description": "Specify the class name of the model to use.\nThis is only needed when the default model detection does not work.\n\nMutually exclusive with `resolver`.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "resolver",
            "description": "Reference to a function that receives the decoded `id` and returns a result.\nConsists of two parts: a class name and a method name, seperated by an `@` symbol.\nIf you pass only a class name, the method name defaults to `__invoke`.\n\nMutually exclusive with `model`.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "notIn",
        "description": "Use the client given value to add a NOT IN conditional to a database query.",
        "isRepeatable": true,
        "locations": [
          "ARGUMENT_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "key",
            "description": "Specify the database column to compare.\nOnly required if database column has a different name than the attribute in your schema.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "oneOf",
        "description": "Indicates exactly one field must be supplied and this field must not be `null`.",
        "isRepeatable": false,
        "locations": [
          "INPUT_OBJECT"
        ],
        "args": []
      },
      {
        "name": "orderBy",
        "description": "Sort a result list by one or more given columns.",
        "isRepeatable": false,
        "locations": [
          "ARGUMENT_DEFINITION",
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "column",
            "description": "The database column for which the order by clause will be applied on.\nOnly used when the directive is added on a field.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "columns",
            "description": "Restrict the allowed column names to a well-defined list.\nThis improves introspection capabilities and security.\nMutually exclusive with `columnsEnum`.\nOnly used when the directive is added on an argument.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "columnsEnum",
            "description": "Use an existing enumeration type to restrict the allowed columns to a predefined list.\nThis allows you to re-use the same enum for multiple fields.\nMutually exclusive with `columns`.\nOnly used when the directive is added on an argument.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "direction",
            "description": "The direction of the order by clause.\nOnly used when the directive is added on a field.",
            "type": {
              "kind": "ENUM",
              "name": "OrderByDirection",
              "ofType": null
            },
            "defaultValue": "ASC",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "relations",
            "description": "Allow clients to sort by aggregates on relations.\nOnly used when the directive is added on an argument.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "INPUT_OBJECT",
                  "name": "OrderByRelation",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "paginate",
        "description": "Query multiple entries as a paginated list.",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "builder",
            "description": "Point to a function that provides a Query Builder instance.\nConsists of two parts: a class name and a method name, seperated by an `@` symbol.\nIf you pass only a class name, the method name defaults to `__invoke`.\nMutually exclusive with `model` and `resolver`.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "complexityResolver",
            "description": "Reference a function to customize the complexity score calculation.\nConsists of two parts: a class name and a method name, seperated by an `@` symbol.\nIf you pass only a class name, the method name defaults to `__invoke`.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "defaultCount",
            "description": "Allow clients to query paginated lists without specifying the amount of items.\nOverrules the `pagination.default_count` setting from `lighthouse.php`.\nSetting this to `null` means clients have to explicitly ask for the count.",
            "type": {
              "kind": "SCALAR",
              "name": "Int",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "maxCount",
            "description": "Limit the maximum amount of items that clients can request from paginated lists.\nOverrules the `pagination.max_count` setting from `lighthouse.php`.\nSetting this to `null` means the count is unrestricted.",
            "type": {
              "kind": "SCALAR",
              "name": "Int",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "model",
            "description": "Specify the class name of the model to use.\nThis is only needed when the default model detection does not work.\nMutually exclusive with `builder` and `resolver`.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "resolver",
            "description": "Reference a function that resolves the field by directly returning data in a Paginator instance.\nMutually exclusive with `builder` and `model`.\nNot compatible with `scopes` and builder arguments such as `@eq`.\nConsists of two parts: a class name and a method name, seperated by an `@` symbol.\nIf you pass only a class name, the method name defaults to `__invoke`.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "scopes",
            "description": "Apply scopes to the underlying query.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "type",
            "description": "Which pagination style should be used.",
            "type": {
              "kind": "ENUM",
              "name": "PaginateType",
              "ofType": null
            },
            "defaultValue": "PAGINATOR",
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "rename",
        "description": "Change the internally used name of a field or argument.\n\nThis does not change the schema from a client perspective.",
        "isRepeatable": false,
        "locations": [
          "ARGUMENT_DEFINITION",
          "FIELD_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "attribute",
            "description": "The internal name of an attribute/property/key.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "renameArgs",
        "description": "Apply the @rename directives on the incoming arguments.",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": []
      },
      {
        "name": "restore",
        "description": "Un-delete one or more soft deleted models.",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "model",
            "description": "Specify the class name of the model to use.\nThis is only needed when the default model detection does not work.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "scopes",
            "description": "Apply scopes to the underlying query.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "rules",
        "description": "Validate an argument using [Laravel validation](https://laravel.com/docs/validation).",
        "isRepeatable": true,
        "locations": [
          "ARGUMENT_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "apply",
            "description": "Specify the validation rules to apply to the field.\nThis can either be a reference to [Laravel's built-in validation rules](https://laravel.com/docs/validation#available-validation-rules),\nor the fully qualified class name of a custom validation rule.\n\nValidation rules that mutate the given input value are _not_ supported:\n- `exclude_if`\n- `exclude_unless`\nUse ArgTransformerDirectives or FieldMiddlewareDirectives instead.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "LIST",
                "name": null,
                "ofType": {
                  "kind": "NON_NULL",
                  "name": null,
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "String",
                    "ofType": null
                  }
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "attribute",
            "description": "Specify a custom attribute name to use in your validation message.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "messages",
            "description": "Specify the messages to return if the validators fail.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "INPUT_OBJECT",
                  "name": "RulesMessage",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "rulesForArray",
        "description": "Run validation on an array itself, using [Laravel built-in validation](https://laravel.com/docs/validation).",
        "isRepeatable": true,
        "locations": [
          "ARGUMENT_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "apply",
            "description": "Specify the validation rules to apply to the field.\nThis can either be a reference to any of Laravel's built-in validation rules: https://laravel.com/docs/validation#available-validation-rules,\nor the fully qualified class name of a custom validation rule.\n\nValidation rules that mutate the given input values are _not_ supported:\n- `exclude_if`\n- `exclude_unless`\nUse ArgTransformerDirectives or FieldMiddlewareDirectives instead.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "LIST",
                "name": null,
                "ofType": {
                  "kind": "NON_NULL",
                  "name": null,
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "String",
                    "ofType": null
                  }
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "attribute",
            "description": "Specify a custom attribute name to use in your validation message.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "messages",
            "description": "Specify the messages to return if the validators fail.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "INPUT_OBJECT",
                  "name": "RulesForArrayMessage",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "sanitize",
        "description": "Apply sanitization to the arguments of a field.",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": []
      },
      {
        "name": "scalar",
        "description": "Reference a class implementing a scalar definition.",
        "isRepeatable": false,
        "locations": [
          "SCALAR"
        ],
        "args": [
          {
            "name": "class",
            "description": "Reference to a class that extends `\\GraphQL\\Type\\Definition\\ScalarType`.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "scope",
        "description": "Adds a scope to the query builder.\n\nThe scope method will receive the client-given value of the argument as the second parameter.\nThis also works with custom query builders, it simply calls its methods with the argument value.",
        "isRepeatable": true,
        "locations": [
          "ARGUMENT_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "name",
            "description": "The name of the scope or method on the custom query builder.\nDefaults to the name of the argument or input field.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "show",
        "description": "Includes the annotated element from the schema conditionally.",
        "isRepeatable": true,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "env",
            "description": "Specify which environments may use this field, e.g. [\"testing\"].",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "LIST",
                "name": null,
                "ofType": {
                  "kind": "NON_NULL",
                  "name": null,
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "String",
                    "ofType": null
                  }
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "skip",
        "description": "Directs the executor to skip this field or fragment when the `if` argument is true.",
        "isRepeatable": false,
        "locations": [
          "FIELD",
          "FRAGMENT_SPREAD",
          "INLINE_FRAGMENT"
        ],
        "args": [
          {
            "name": "if",
            "description": "Skipped when true.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "Boolean",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "softDeletes",
        "description": "Allows to filter if trashed elements should be fetched.\nThis manipulates the schema by adding the argument\n`trashed: Trashed @trashed` to the field.",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": []
      },
      {
        "name": "specifiedBy",
        "description": "Exposes a URL that specifies the behavior of this scalar.",
        "isRepeatable": false,
        "locations": [
          "SCALAR"
        ],
        "args": [
          {
            "name": "url",
            "description": "The URL that specifies the behavior of this scalar.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "spread",
        "description": "Merge the fields of a nested input object into the arguments of its parent\nwhen processing the field arguments given by a client.",
        "isRepeatable": false,
        "locations": [
          "ARGUMENT_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": []
      },
      {
        "name": "throttle",
        "description": "Sets rate limit to access the field. Does the same as ThrottleRequests Laravel Middleware.",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "decayMinutes",
            "description": "Time in minutes to reset attempts.",
            "type": {
              "kind": "SCALAR",
              "name": "Float",
              "ofType": null
            },
            "defaultValue": "1",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "maxAttempts",
            "description": "Maximum number of attempts in a specified time interval.",
            "type": {
              "kind": "SCALAR",
              "name": "Int",
              "ofType": null
            },
            "defaultValue": "60",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "name",
            "description": "Named preconfigured rate limiter.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "prefix",
            "description": "Prefix to distinguish several field groups.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "transformArgs",
        "description": "Transform the arguments of a field.",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": []
      },
      {
        "name": "trashed",
        "description": "Allows to filter if trashed elements should be fetched.",
        "isRepeatable": false,
        "locations": [
          "ARGUMENT_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": []
      },
      {
        "name": "trim",
        "description": "Remove whitespace from the beginning and end of a given input.\n\nThis can be used on:\n- a single argument or input field to sanitize that subtree\n- a field to trim all strings",
        "isRepeatable": false,
        "locations": [
          "ARGUMENT_DEFINITION",
          "FIELD_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": []
      },
      {
        "name": "union",
        "description": "Use a custom function to determine the concrete type of unions.",
        "isRepeatable": false,
        "locations": [
          "UNION"
        ],
        "args": [
          {
            "name": "resolveType",
            "description": "Reference a function that returns the implementing Object Type.\nConsists of two parts: a class name and a method name, seperated by an `@` symbol.\nIf you pass only a class name, the method name defaults to `__invoke`.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "update",
        "description": "Update an Eloquent model with the given arguments.",
        "isRepeatable": false,
        "locations": [
          "ARGUMENT_DEFINITION",
          "FIELD_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "model",
            "description": "Specify the class name of the model to use.\nThis is only needed when the default model detection does not work.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "relation",
            "description": "Specify the name of the relation on the parent model.\nThis is only needed when using this directive as a nested arg\nresolver and if the name of the relation is not the arg name.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "updateMany",
        "description": "Update multiple Eloquent models with the given arguments.",
        "isRepeatable": false,
        "locations": [
          "ARGUMENT_DEFINITION",
          "FIELD_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "model",
            "description": "Specify the class name of the model to use.\nThis is only needed when the default model detection does not work.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "relation",
            "description": "Specify the name of the relation on the parent model.\nThis is only needed when using this directive as a nested arg\nresolver and if the name of the relation is not the arg name.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "upload",
        "description": "Uploads given file to storage, removes the argument and sets\nthe returned path to the attribute key provided.\n\nThis does not change the schema from a client perspective.",
        "isRepeatable": false,
        "locations": [
          "ARGUMENT_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "disk",
            "description": "The storage disk to be used, defaults to config value `filesystems.default`.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "path",
            "description": "The path where the file should be stored.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "defaultValue": "\"/\"",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "public",
            "description": "Should the visibility be public?",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "Boolean",
                "ofType": null
              }
            },
            "defaultValue": "false",
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "upsert",
        "description": "Create or update an Eloquent model with the given arguments.",
        "isRepeatable": false,
        "locations": [
          "ARGUMENT_DEFINITION",
          "FIELD_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "model",
            "description": "Specify the class name of the model to use.\nThis is only needed when the default model detection does not work.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "relation",
            "description": "Specify the name of the relation on the parent model.\nThis is only needed when using this directive as a nested arg\nresolver and if the name of the relation is not the arg name.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "upsertMany",
        "description": "Create or update multiple Eloquent models with given arguments.",
        "isRepeatable": false,
        "locations": [
          "ARGUMENT_DEFINITION",
          "FIELD_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "model",
            "description": "Specify the class name of the model to use.\nThis is only needed when the default model detection does not work.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "relation",
            "description": "Specify the name of the relation on the parent model.\nThis is only needed when using this directive as a nested arg\nresolver and if the name of the relation is not the arg name.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "validate",
        "description": "Run validation on a field.",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": []
      },
      {
        "name": "validator",
        "description": "Provide validation rules through a PHP class.",
        "isRepeatable": true,
        "locations": [
          "ARGUMENT_DEFINITION",
          "FIELD_DEFINITION",
          "INPUT_FIELD_DEFINITION",
          "INPUT_OBJECT"
        ],
        "args": [
          {
            "name": "class",
            "description": "The name of the class to use.\n\nIf defined on an input, this defaults to a class called `{$inputName}Validator` in the\ndefault validator namespace. For fields, it uses the namespace of the parent type\nand the field name: `{$parent}\\{$field}Validator`.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "where",
        "description": "Use an input value as a [where filter](https://laravel.com/docs/queries#where-clauses).",
        "isRepeatable": true,
        "locations": [
          "ARGUMENT_DEFINITION",
          "FIELD_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "clause",
            "description": "Use Laravel's where clauses upon the query builder.\nThis only works for clauses with the signature (string $column, string $operator, mixed $value).",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "ignoreNull",
            "description": "Treat explicit `null` as if the argument is not present in the request?",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "Boolean",
                "ofType": null
              }
            },
            "defaultValue": "false",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "key",
            "description": "Specify the database column to compare.\nOnly required if database column has a different name than the attribute in your schema.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "operator",
            "description": "Specify the operator to use within the WHERE condition.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": "\"=\"",
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "value",
            "description": "Provide a value to compare against.\nExclusively required when this directive is used on a field.",
            "type": {
              "kind": "SCALAR",
              "name": "WhereValue",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "whereAuth",
        "description": "Filter a type to only return instances owned by the current user.",
        "isRepeatable": false,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "guards",
            "description": "Specify which guards to use, e.g. [\"api\"].\nWhen not defined, the default from `lighthouse.php` is used.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "relation",
            "description": "Name of the relationship that links to the user model.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "whereBetween",
        "description": "Verify that a column's value is between two values.\n\nThe type of the input value this is defined upon should be\nan `input` object with two fields.",
        "isRepeatable": true,
        "locations": [
          "ARGUMENT_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "key",
            "description": "Specify the database column to compare.\nOnly required if database column has a different name than the attribute in your schema.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "whereJsonContains",
        "description": "Use an input value as a [whereJsonContains filter](https://laravel.com/docs/queries#json-where-clauses).",
        "isRepeatable": true,
        "locations": [
          "ARGUMENT_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "key",
            "description": "Specify the database column and path inside the JSON to compare.\nOnly required if database column has a different name than the attribute in your schema.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "whereKey",
        "description": "Add a where clause on the primary key to the Eloquent Model query.",
        "isRepeatable": true,
        "locations": [
          "ARGUMENT_DEFINITION",
          "FIELD_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "value",
            "description": "Provide a value to compare against.\nExclusively required when this directive is used on a field.",
            "type": {
              "kind": "SCALAR",
              "name": "WhereKeyValue",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "whereNotBetween",
        "description": "Verify that a column's value lies outside two values.\n\nThe type of the input value this is defined upon should be\nan `input` object with two fields.",
        "isRepeatable": true,
        "locations": [
          "ARGUMENT_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "key",
            "description": "Specify the database column to compare.\nOnly required if database column has a different name than the attribute in your schema.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "whereNotNull",
        "description": "Filter the value is not null.",
        "isRepeatable": true,
        "locations": [
          "ARGUMENT_DEFINITION",
          "FIELD_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "key",
            "description": "Specify the database column to compare.\nOnly required if database column has a different name than the attribute in your schema.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "value",
            "description": "Should the value not be null?\nExclusively required when this directive is used on a field.",
            "type": {
              "kind": "SCALAR",
              "name": "Boolean",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "whereNull",
        "description": "Filter the value is null.",
        "isRepeatable": true,
        "locations": [
          "ARGUMENT_DEFINITION",
          "FIELD_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "key",
            "description": "Specify the database column to compare.\nOnly required if database column has a different name than the attribute in your schema.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "value",
            "description": "Should the value be null?\nExclusively required when this directive is used on a field.",
            "type": {
              "kind": "SCALAR",
              "name": "Boolean",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "with",
        "description": "Eager-load an Eloquent relation.",
        "isRepeatable": true,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "relation",
            "description": "Specify the relationship method name in the model class,\nif it is named different from the field in the schema.",
            "type": {
              "kind": "SCALAR",
              "name": "String",
              "ofType": null
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "scopes",
            "description": "Apply scopes to the underlying query.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "withCount",
        "description": "Eager-load the count of an Eloquent relation if the field is queried.\n\nNote that this does not return a value for the field, the count is simply\nprefetched, assuming it is used to compute the field value. Use `@count`\nif the field should simply return the relation count.",
        "isRepeatable": true,
        "locations": [
          "FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "relation",
            "description": "Specify the relationship method name in the model class.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "SCALAR",
                "name": "String",
                "ofType": null
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          },
          {
            "name": "scopes",
            "description": "Apply scopes to the underlying query.",
            "type": {
              "kind": "LIST",
              "name": null,
              "ofType": {
                "kind": "NON_NULL",
                "name": null,
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String",
                  "ofType": null
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      },
      {
        "name": "withoutGlobalScopes",
        "description": "Omit any number of global scopes from the query builder.\n\nThis directive should be used on arguments of type `Boolean`.\nThe scopes will be removed only if `true` is passed by the client.",
        "isRepeatable": false,
        "locations": [
          "ARGUMENT_DEFINITION",
          "INPUT_FIELD_DEFINITION"
        ],
        "args": [
          {
            "name": "names",
            "description": "The names of the global scopes to omit.",
            "type": {
              "kind": "NON_NULL",
              "name": null,
              "ofType": {
                "kind": "LIST",
                "name": null,
                "ofType": {
                  "kind": "NON_NULL",
                  "name": null,
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "String",
                    "ofType": null
                  }
                }
              }
            },
            "defaultValue": null,
            "isDeprecated": false,
            "deprecationReason": null
          }
        ]
      }
    ]
  }
}